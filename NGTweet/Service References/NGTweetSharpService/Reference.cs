//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.60818.0
// 
namespace NGTweet.NGTweetSharpService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetDataResponse", Namespace="http://schemas.datacontract.org/2004/07/TweetSharpService.DTO")]
    public partial class GetDataResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<NGTweet.NGTweetSharpService.NGTweeterStatus> TweeterStatusesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<NGTweet.NGTweetSharpService.NGTweeterStatus> TweeterStatuses {
            get {
                return this.TweeterStatusesField;
            }
            set {
                if ((object.ReferenceEquals(this.TweeterStatusesField, value) != true)) {
                    this.TweeterStatusesField = value;
                    this.RaisePropertyChanged("TweeterStatuses");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NGTweeterStatus", Namespace="http://schemas.datacontract.org/2004/07/TweetSharpService.DomainObjects")]
    public partial class NGTweeterStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime CreatedDateField;
        
        private string TweetField;
        
        private NGTweet.NGTweetSharpService.NGTweeterUser UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tweet {
            get {
                return this.TweetField;
            }
            set {
                if ((object.ReferenceEquals(this.TweetField, value) != true)) {
                    this.TweetField = value;
                    this.RaisePropertyChanged("Tweet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NGTweet.NGTweetSharpService.NGTweeterUser User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NGTweeterUser", Namespace="http://schemas.datacontract.org/2004/07/TweetSharpService.DomainObjects")]
    public partial class NGTweeterUser : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string NameField;
        
        private string ProfileImageUrlField;
        
        private string ScreenNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfileImageUrl {
            get {
                return this.ProfileImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfileImageUrlField, value) != true)) {
                    this.ProfileImageUrlField = value;
                    this.RaisePropertyChanged("ProfileImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScreenName {
            get {
                return this.ScreenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreenNameField, value) != true)) {
                    this.ScreenNameField = value;
                    this.RaisePropertyChanged("ScreenName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NGTweetSharpService.ITweetSharpService")]
    public interface ITweetSharpService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITweetSharpService/GetTweetsOnPublicTimeline", ReplyAction="http://tempuri.org/ITweetSharpService/GetTweetsOnPublicTimelineResponse")]
        System.IAsyncResult BeginGetTweetsOnPublicTimeline(System.AsyncCallback callback, object asyncState);
        
        NGTweet.NGTweetSharpService.GetDataResponse EndGetTweetsOnPublicTimeline(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITweetSharpServiceChannel : NGTweet.NGTweetSharpService.ITweetSharpService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTweetsOnPublicTimelineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTweetsOnPublicTimelineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NGTweet.NGTweetSharpService.GetDataResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NGTweet.NGTweetSharpService.GetDataResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TweetSharpServiceClient : System.ServiceModel.ClientBase<NGTweet.NGTweetSharpService.ITweetSharpService>, NGTweet.NGTweetSharpService.ITweetSharpService {
        
        private BeginOperationDelegate onBeginGetTweetsOnPublicTimelineDelegate;
        
        private EndOperationDelegate onEndGetTweetsOnPublicTimelineDelegate;
        
        private System.Threading.SendOrPostCallback onGetTweetsOnPublicTimelineCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TweetSharpServiceClient() {
        }
        
        public TweetSharpServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TweetSharpServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TweetSharpServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TweetSharpServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetTweetsOnPublicTimelineCompletedEventArgs> GetTweetsOnPublicTimelineCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NGTweet.NGTweetSharpService.ITweetSharpService.BeginGetTweetsOnPublicTimeline(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTweetsOnPublicTimeline(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NGTweet.NGTweetSharpService.GetDataResponse NGTweet.NGTweetSharpService.ITweetSharpService.EndGetTweetsOnPublicTimeline(System.IAsyncResult result) {
            return base.Channel.EndGetTweetsOnPublicTimeline(result);
        }
        
        private System.IAsyncResult OnBeginGetTweetsOnPublicTimeline(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((NGTweet.NGTweetSharpService.ITweetSharpService)(this)).BeginGetTweetsOnPublicTimeline(callback, asyncState);
        }
        
        private object[] OnEndGetTweetsOnPublicTimeline(System.IAsyncResult result) {
            NGTweet.NGTweetSharpService.GetDataResponse retVal = ((NGTweet.NGTweetSharpService.ITweetSharpService)(this)).EndGetTweetsOnPublicTimeline(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTweetsOnPublicTimelineCompleted(object state) {
            if ((this.GetTweetsOnPublicTimelineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTweetsOnPublicTimelineCompleted(this, new GetTweetsOnPublicTimelineCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTweetsOnPublicTimelineAsync() {
            this.GetTweetsOnPublicTimelineAsync(null);
        }
        
        public void GetTweetsOnPublicTimelineAsync(object userState) {
            if ((this.onBeginGetTweetsOnPublicTimelineDelegate == null)) {
                this.onBeginGetTweetsOnPublicTimelineDelegate = new BeginOperationDelegate(this.OnBeginGetTweetsOnPublicTimeline);
            }
            if ((this.onEndGetTweetsOnPublicTimelineDelegate == null)) {
                this.onEndGetTweetsOnPublicTimelineDelegate = new EndOperationDelegate(this.OnEndGetTweetsOnPublicTimeline);
            }
            if ((this.onGetTweetsOnPublicTimelineCompletedDelegate == null)) {
                this.onGetTweetsOnPublicTimelineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTweetsOnPublicTimelineCompleted);
            }
            base.InvokeAsync(this.onBeginGetTweetsOnPublicTimelineDelegate, null, this.onEndGetTweetsOnPublicTimelineDelegate, this.onGetTweetsOnPublicTimelineCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override NGTweet.NGTweetSharpService.ITweetSharpService CreateChannel() {
            return new TweetSharpServiceClientChannel(this);
        }
        
        private class TweetSharpServiceClientChannel : ChannelBase<NGTweet.NGTweetSharpService.ITweetSharpService>, NGTweet.NGTweetSharpService.ITweetSharpService {
            
            public TweetSharpServiceClientChannel(System.ServiceModel.ClientBase<NGTweet.NGTweetSharpService.ITweetSharpService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetTweetsOnPublicTimeline(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTweetsOnPublicTimeline", _args, callback, asyncState);
                return _result;
            }
            
            public NGTweet.NGTweetSharpService.GetDataResponse EndGetTweetsOnPublicTimeline(System.IAsyncResult result) {
                object[] _args = new object[0];
                NGTweet.NGTweetSharpService.GetDataResponse _result = ((NGTweet.NGTweetSharpService.GetDataResponse)(base.EndInvoke("GetTweetsOnPublicTimeline", _args, result)));
                return _result;
            }
        }
    }
}
